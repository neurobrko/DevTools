#functions
e_err() {
  # print red bold text
  echo -e "\e[1;31m$1\e[0m"
}

e_info() {
  # print blue bold text
  echo -e "\e[1;34m$1\e[0m"
}

e_succ() {
  # print green bold text
  echo -e "\e[1;32m$1\e[0m"
}

e_warn() {
  # print orange bold text
  echo -e "\e[1;38;5;208m$1\e[0m"
}

setup_VM() {
  # Fix this with use of $# and shift and shit like that!
  /path/to/DevTools/setup_VM.sh -i $1 -a $2
}

function fake_alias() {
    :
}

# git diff with optional filename from git diff --names-only | nl
git_diff_numbered() {
  if [ $# -eq 0 ]; then
    git diff
  elif [ $# -eq 1 ]; then
    if [[ $1 =~ ^[0-9]+$ ]]; then
      local file=$(git diff --name-only | nl | awk -v num="$1" '$1 == num {print $2}')
      git diff $file
    elif [[ $1 == "n" ]]; then
      git diff --name-only | nl
    fi
  fi
}

# git checkout with tab completion
gc() {
    git checkout "$@"
}
# Enable git completion if available
if [ -f /usr/share/bash-completion/completions/git ]; then
    . /usr/share/bash-completion/completions/git
fi
# Enable git branch completion for gc
if type __git_complete &>/dev/null; then
    __git_complete gc _git_checkout
fi

# git add untracked files, commit and push
git_commit_push() {
    if [ -z "$1" ]; then
        e_err "No commit message provided!"
        return 1
    else
        local message="$*"
        git add .
        git commit -m "$message"
        git push
        e_succ -e "\nCommit '$message' succesfully pushed to branch: '$(git branch --show-current)'."
    fi
}

git_stash_msg() {
    if [ -z "$1" ]; then
        e_warn "Stash changes with message! Don't be lazy..."
    else
        local msg="$*"
        git stash -m "$msg"
        e_succ "Succesfully stashed changes as '$msg' on branch '$(git branch --show-current)'."
    fi
}

git_apply_stash() {
    if [ $# -eq 0 ]; then
        e_warn "Please specify stash number!"
        return 1
    elif [ $# -gt 1 ]; then
        e_warn "Please specify only one stash number!"
        return 1
    else
        git stash apply stash@{"$1"}
    fi
}

git_stash_diff() {
  if [ $# -eq 0 ]; then
    e_warn "Please specify a stash number!"
    return 1
  elif [ $# -gt 1 ]; then
    e_warn "Please specify only one stash number!"
    return 1
  else
    git stash show -p stash@{"$1"}
  fi
}

fill_line_with_string() {
  local string="$1"
  local length="$2"
  local fill="${3:- }"
  if [[ ${#fill} -eq 1 ]]; then
    beg_char=$fill
    end_char=$fill
  fi
  if [[ ${#fill} -eq 2 ]]; then
    beg_char="${fill:0:1}"
    end_char="${fill:1:1}"
  fi
  if [[ ${#fill} -gt 2 ]]; then
    beg_char="${fill:0:1}"
    end_char="${fill:0:1}"
  fi
  local padding=$(( (length - ${#string} - 2) / 2 ))
  local beg=$(printf "%${padding}s" | tr ' ' "$beg_char")
  local end=$(printf "%${padding}s" | tr ' ' "$end_char")
  printf "%s%s%s" "$beg" "" " $string " "$end" ""
  echo ""
}

# LINE LENGTH
line_length=59

fill_line() {
  local length="$1"
  local fill="$2"
  printf "%*s\n" "$length" | tr ' ' "$fill"
}

get_alias_descriptions() {
  # Sections must start with '### '. (With space!)
  # Alias descriptions must one line above alias declaration.
  # All comments above alias description are ignored.
  local file_path="$1"
  if [ -f "$file_path" ]; then
    echo ""
    echo "@ $file_path"
    local description=""
    while IFS= read -r line; do
      if [[ "$line" =~ ^### ]]; then
        fill_line_with_string "${line#'### '}" $line_length "-"
      elif [[ "$line" =~ ^# ]]; then
        description="${line#"# "}"
      elif [[ "$line" =~ ^(alias|fake_alias) ]]; then
        alias_name=$(printf "%5s" $(echo "$line" | cut -d'=' -f1 | awk '{print $2}'))
        echo "$alias_name :: $description"
      fi
    done < "$file_path"
  fi
}

# alias description
display_alias_descriptions() {
  echo ""
  fill_line_with_string "BASH ALIASES DESCRIPTIONS" $line_length " "
  get_alias_descriptions ~/.bash_aliases
  get_alias_descriptions ~/.local_aliases
  get_alias_descriptions ~/.custom_aliases
  fill_line $line_length "-"
}

#edit aliases help
ea_help() {
  e_info "Usage: ea [c|l|h]"
  echo "Edit ~/.bash_aliases file when used without arguments"
  echo "Args: c :: edit ~/.custom_aliases"
  echo "      l :: edit ~/.local_aliases"
  echo "      h :: print help"
}

# edit aliases files
edit_aliases() {
  if [ $# -eq 0 ]; then
    nano ~/.bash_aliases
  elif [ $# -gt 1 ]; then
    e_err "Too many arguments!"
    ea_help
  else
    case "$1" in
      l)
        nano ~/.local_aliases
        ;;
      c)
        nano ~/.custom_aliases
        ;;
      h)
        ea_help
        ;;
      *)
        e_err "Invalid option!"
        ea_help
        ;;
    esac
  fi
}

### General aliases
# ll in human readable format
alias lh='ls -lAh'
# du all items in folder, human readable
alias dh='du -chs *'
# grep shorthand
alias g='grep'
# python 3.12 interpreter/REPL
alias py='python3.12'
# sqlite3 with --table
alias sq='sqlite3 --table'
# source ~/.bash aliases
alias sa='source ~/.bash_aliases'
# edit aliases files ('ea h' for help)
alias ea=edit_aliases
# copy <text> to clipboard
alias xc='xclip -sel clip'
# print alias description
alias h='display_alias_descriptions'
### Dev aliases
# SyncSuite rsync to remote
alias r2r='/your/sync_suite/dir/rsync_to_remote.py -c /your/conf_file/dir/sync_conf.yaml -m /your/file_map/dir/file_map.yaml'
# SyncSuite file map
alias rfm='/your/sync_suite/dir/file_map.py -c /your/conf_file/dir/sync_conf.yaml -m /your/file_map/dir/file_map.yaml -sm /your/file_map/dir/synced_file_map.yaml'
# get interface ip address
alias gip='/path/to/DevTools/get_ip.sh'
# run pre-commit on changed files only
alias pc='pre-commit run --files $(git diff --name-only)'
### Remote VM aliases
# ssh to VM
alias s='/path/to/DevTools/ssh_to_vm.sh'
# VM setup
alias svm=setup_VM
### Git aliases
# git status
alias gi='git status'
# git diff (n files with #, <#> single file)
alias gd=git_diff_numbered
# git fetch all
alias gf='git fetch --all'
# git checkout with tab completion
fake_alias gc
# git commit and push with message
alias gcp=git_commit_push
# git submodule update
alias gsu='git submodule update'
# git stash with message
alias gsm=git_stash_msg
# git stash list
alias gsl='git stash list'
# git stash patch
alias gsd=git_stash_diff
# git stash apply <#>
alias gsa=git_apply_stash

# LOCAL/CUSTOM bash aliases
# You can create custom local aliases in .local_aliases
# or .custom_aliases file for some temporary aliases
if [ -f ~/.local_aliases ]; then
    . ~/.local_aliases
fi
if [ -f ~/.custom_aliases ]; then
    . ~/.custom_aliases
fi
